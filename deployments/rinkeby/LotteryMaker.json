{
  "address": "0x5d189FA5B9334242cAFD5699Ccb11C7C08AB3194",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_creatorFee",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_vrfCoordinator",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "_subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "bytes32",
          "name": "_keyHash",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "lotteryID",
          "type": "uint256"
        }
      ],
      "name": "LotteryCreatedEvent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lotteryID",
          "type": "uint256"
        }
      ],
      "name": "calculateWinner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newFee",
          "type": "uint256"
        }
      ],
      "name": "changeCreatorFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "entranceFee",
          "type": "uint256"
        }
      ],
      "name": "createLottery",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "creatorFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lotteryID",
          "type": "uint256"
        }
      ],
      "name": "enterLottery",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "lotteryIDBalanceMapping",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "lotteryIDDurationMapping",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "lotteryIDEntrancesMapping",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "lotteryIDFeeMapping",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "lotteryIDOwnerMapping",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "lotteryIDStateMapping",
      "outputs": [
        {
          "internalType": "enum LotteryMaker.LotteryState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "requestIDLotteryIDMapping",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lotteryID",
          "type": "uint256"
        }
      ],
      "name": "stopEntrance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x364a712285bb447d4c399932d185baac89eca4d3eaf8341dc56c35887d672b4e",
  "receipt": {
    "to": null,
    "from": "0x6B75f6c15E34eEfE458FD713fD016C6d515436AC",
    "contractAddress": "0x5d189FA5B9334242cAFD5699Ccb11C7C08AB3194",
    "transactionIndex": 31,
    "gasUsed": "1849148",
    "logsBloom": "0x
    "blockHash": "0x61e0375219cf41edc5654ec6d2ff130ce8d1b236a1023d573acd3dab0b23fa2c",
    "transactionHash": "0x364a712285bb447d4c399932d185baac89eca4d3eaf8341dc56c35887d672b4e",
    "logs": [
      {
        "transactionIndex": 31,
        "blockNumber": 10684606,
        "transactionHash": "0x364a712285bb447d4c399932d185baac89eca4d3eaf8341dc56c35887d672b4e",
        "address": "0x5d189FA5B9334242cAFD5699Ccb11C7C08AB3194",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000006b75f6c15e34eefe458fd713fd016c6d515436ac"
        ],
        "data": "0x",
        "logIndex": 67,
        "blockHash": "0x61e0375219cf41edc5654ec6d2ff130ce8d1b236a1023d573acd3dab0b23fa2c"
      }
    ],
    "blockNumber": 10684606,
    "cumulativeGasUsed": "10854615",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "1000000000000000",
    "0x6168499c0cFfCaCD319c818142124B7A15E857ab",
    "4307",
    "0xd89b2bf150e3b9e13446986e571fb9cab24b13cea0a43ea20a6049a85cc807cc"
  ],
  "numDeployments": 5,
  "solcInputHash": "e899be622f35339de04661f42e5631c1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_creatorFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_vrfCoordinator\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"_keyHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"lotteryID\",\"type\":\"uint256\"}],\"name\":\"LotteryCreatedEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lotteryID\",\"type\":\"uint256\"}],\"name\":\"calculateWinner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newFee\",\"type\":\"uint256\"}],\"name\":\"changeCreatorFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"entranceFee\",\"type\":\"uint256\"}],\"name\":\"createLottery\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creatorFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lotteryID\",\"type\":\"uint256\"}],\"name\":\"enterLottery\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lotteryIDBalanceMapping\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lotteryIDDurationMapping\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lotteryIDEntrancesMapping\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lotteryIDFeeMapping\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lotteryIDOwnerMapping\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lotteryIDStateMapping\",\"outputs\":[{\"internalType\":\"enum LotteryMaker.LotteryState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"requestIDLotteryIDMapping\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lotteryID\",\"type\":\"uint256\"}],\"name\":\"stopEntrance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LotteryMaker.sol\":\"LotteryMaker\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0xec8b7e3032e887dd0732d2a5f8552ddce64a99a81b0008ef0bcf6cad68a535fc\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n}\\n\",\"keccak256\":\"0xcb29ee50ee2b05441e4deebf8b4756a0feec4f5497e36b6a1ca320f7ce561802\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"contracts/LotteryMaker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// import \\\"hardhat/console.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\n\\n\\ncontract LotteryMaker is Ownable, VRFConsumerBaseV2 {\\n    using Counters for Counters.Counter;\\n    enum LotteryState { Open, Stopped, Calculating, MoneyTransfered }\\n    event LotteryCreatedEvent(address indexed owner, uint indexed lotteryID);\\n\\n    uint public creatorFee;    \\n    mapping(uint => address) public lotteryIDOwnerMapping;\\n    mapping(uint => uint) public lotteryIDFeeMapping;\\n    mapping(uint => uint) public lotteryIDDurationMapping;\\n    mapping(uint => LotteryState) public lotteryIDStateMapping;\\n    mapping(uint => uint) public lotteryIDBalanceMapping;\\n    mapping(uint => uint) public requestIDLotteryIDMapping;\\n    mapping(uint => address payable[]) public lotteryIDEntrancesMapping;\\n    Counters.Counter private lotteryIDCounter;\\n\\n    // Random number params\\n    VRFCoordinatorV2Interface COORDINATOR;\\n\\n    // Your subscription ID.\\n    uint64 s_subscriptionId;    \\n\\n    // The gas lane to use, which specifies the maximum gas price to bump to.\\n    // For a list of available gas lanes on each network,\\n    // see https://docs.chain.link/docs/vrf-contracts/#configurations\\n    bytes32 keyHash;\\n\\n    // Depends on the number of requested values that you want sent to the\\n    // fulfillRandomWords() function. Storing each word costs about 20,000 gas,\\n    // so 100,000 is a safe default for this example contract. Test and adjust\\n    // this limit based on the network that you select, the size of the request,\\n    // and the processing of the callback request in the fulfillRandomWords()\\n    // function.\\n    uint32 callbackGasLimit = 100000;    \\n    uint16 requestConfirmations = 3;\\n    // For this example, retrieve 2 random values in one request.\\n    // Cannot exceed VRFCoordinatorV2.MAX_NUM_WORDS.\\n    uint32 numWords = 1;\\n\\n    constructor(\\n        uint _creatorFee,\\n        address _vrfCoordinator,\\n        uint64 _subscriptionId,\\n        bytes32 _keyHash)\\n            VRFConsumerBaseV2(_vrfCoordinator)\\n    {\\n        COORDINATOR = VRFCoordinatorV2Interface(_vrfCoordinator);\\n        // console.log(\\\"Deploying a ContractMaker with minimum fee:\\\", _creatorFee);\\n        creatorFee = _creatorFee;\\n        s_subscriptionId = _subscriptionId;\\n        keyHash = _keyHash;\\n    }\\n\\n    function changeCreatorFee(uint _newFee) public onlyOwner {\\n        // console.log(\\\"Change fee to new value:\\\", _newFee);\\n        creatorFee = _newFee;\\n    }\\n\\n    function createLottery(uint entranceFee)\\n        external payable \\n    {\\n        // console.log(\\\"createLottery(entranceFee=\\\", entranceFee, \\\")\\\");\\n        require(msg.value >= creatorFee, \\\"Not enough ETH to create a lottery\\\");\\n        // console.log(\\\"   Create a lottery with fee: \\\", entranceFee);\\n        lotteryIDCounter.increment();\\n        uint lotteryID = lotteryIDCounter.current();        \\n        // console.log(\\\"   LotteryID: \\\", lotteryID);        \\n        lotteryIDFeeMapping[lotteryID] = entranceFee;\\n        lotteryIDStateMapping[lotteryID] = LotteryState.Open;\\n        lotteryIDBalanceMapping[lotteryID] = 0;\\n        lotteryIDOwnerMapping[lotteryID] = msg.sender;\\n        emit LotteryCreatedEvent(msg.sender, lotteryID);\\n    }\\n\\n    function enterLottery(uint lotteryID) external payable {\\n        // console.log(\\\"enterLottery(lotteryID=\\\", lotteryID, \\\")\\\");\\n        // console.log(\\\"   Somebody tryed to enter the lottery: \\\", lotteryID);\\n        require(lotteryIDStateMapping[lotteryID] == LotteryState.Open, \\\"Sorry, lottery is not open\\\");\\n        require(msg.value >= lotteryIDFeeMapping[lotteryID], \\\"Not enough ETH to enter the lottery\\\");\\n        // console.log(\\\"   Somebody entered the lottery and payed \\\", msg.value);\\n        lotteryIDBalanceMapping[lotteryID] = lotteryIDBalanceMapping[lotteryID] + msg.value;\\n        lotteryIDEntrancesMapping[lotteryID].push(payable(msg.sender));\\n    }\\n\\n    function isOwner(uint lotteryID) internal view returns(bool) {        \\n        return msg.sender == lotteryIDOwnerMapping[lotteryID];\\n    }\\n\\n    function stopEntrance(uint lotteryID) external {\\n        // console.log(\\\"stopEntrance(lotteryID=\\\", lotteryID, \\\")\\\");\\n        // console.log(\\\"   Stopping entrance. LotteryID :\\\", lotteryID);\\n        // console.log(\\\"   msg.sender:\\\", msg.sender);        \\n        require(isOwner(lotteryID), \\\"Only creator of the lottery can stop the entrances\\\");\\n        require(lotteryIDStateMapping[lotteryID] == LotteryState.Open, \\\"Sorry, lottery is not open\\\");\\n        lotteryIDStateMapping[lotteryID] = LotteryState.Stopped;\\n        // console.log(\\\"   Lottery stopped \\\", lotteryID);\\n    }\\n\\n    function calculateWinner(uint lotteryID) external {\\n        // console.log(\\\"calculateWinner(lotteryID=\\\", lotteryID, \\\")\\\");\\n        require(isOwner(lotteryID), \\\"Only creator of the Lottery can calculate winners\\\");\\n        require(lotteryIDStateMapping[lotteryID] == LotteryState.Stopped, \\\"Sorry, lottery is not stopped\\\");\\n        require(lotteryIDEntrancesMapping[lotteryID].length > 0, \\\"No entrances\\\");\\n        // console.log(\\\"   Random number requested, lotteryID:\\\", lotteryID);\\n        lotteryIDStateMapping[lotteryID] = LotteryState.Calculating;\\n        uint s_requestId = COORDINATOR.requestRandomWords(\\n            keyHash,\\n            s_subscriptionId,\\n            requestConfirmations,\\n            callbackGasLimit,\\n            numWords\\n        );\\n        requestIDLotteryIDMapping[s_requestId] = lotteryID;\\n        // console.log(\\\"   Random number requested, requestID: \\\", s_requestId);\\n    }\\n\\n    function fulfillRandomWords(\\n        uint256 requestID, /* requestId */\\n        uint256[] memory randomWords\\n    ) internal override {\\n        // console.log(\\\"fulfillRandomWords(requestID=\\\", requestID, \\\",randomWords=..)\\\");\\n        // console.log(\\\"   Got a random number. RequestID: \\\", requestID);\\n        // console.log(\\\"   Got a random number. randomWords[0]: \\\", randomWords[0]);\\n        uint lotteryID = requestIDLotteryIDMapping[requestID];\\n        // console.log(\\\"   Convertef requestID to lotteryID: \\\", lotteryID);\\n        address payable[] memory entrances = lotteryIDEntrancesMapping[lotteryID];\\n        uint winnerNumber = randomWords[0] % entrances.length;\\n        // console.log(\\\"   Calculated winner number: \\\", winnerNumber);\\n        winnerCalculated(lotteryID, entrances[winnerNumber]);\\n    }\\n\\n    function winnerCalculated(uint lotteryID, address payable winnerAddress) internal {        \\n        // console.log(\\\"winnerCalculated(lotteryID=\\\", lotteryID, \\\",winnerAddress=..)\\\");\\n        // console.log(\\\"   Calculated winner address: \\\", winnerAddress);\\n        require(lotteryIDStateMapping[lotteryID] == LotteryState.Calculating, \\\"Sorry, lottery is not in Calculating state\\\");\\n        lotteryIDStateMapping[lotteryID] = LotteryState.MoneyTransfered;\\n        uint toTransfer = lotteryIDBalanceMapping[lotteryID];\\n        // console.log(\\\"   On the balance: \\\", toTransfer);\\n        // console.log(\\\"   On the contract address balance: \\\", address(this).balance);\\n        lotteryIDBalanceMapping[lotteryID] = 0;\\n        winnerAddress.transfer(toTransfer);\\n        // console.log(\\\"   Money transfered: \\\", winnerAddress);\\n        delete lotteryIDEntrancesMapping[lotteryID];\\n    }\\n}\\n\",\"keccak256\":\"0x176b46d1f81e3475577d3aee1a2f259c2dd89d0e75f51f86c5c15253f8816b01\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a0604052620186a0600c60006101000a81548163ffffffff021916908363ffffffff1602179055506003600c60046101000a81548161ffff021916908361ffff1602179055506001600c60066101000a81548163ffffffff021916908363ffffffff1602179055503480156200007557600080fd5b50604051620022493803806200224983398181016040528101906200009b919062000364565b82620000bc620000b06200017360201b60201c565b6200017b60201b60201c565b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250505082600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508360018190555081600a60146101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555080600b8190555050505050620003d6565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b6000819050919050565b620002598162000244565b81146200026557600080fd5b50565b60008151905062000279816200024e565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620002ac826200027f565b9050919050565b620002be816200029f565b8114620002ca57600080fd5b50565b600081519050620002de81620002b3565b92915050565b600067ffffffffffffffff82169050919050565b6200030381620002e4565b81146200030f57600080fd5b50565b6000815190506200032381620002f8565b92915050565b6000819050919050565b6200033e8162000329565b81146200034a57600080fd5b50565b6000815190506200035e8162000333565b92915050565b600080600080608085870312156200038157620003806200023f565b5b6000620003918782880162000268565b9450506020620003a487828801620002cd565b9350506040620003b78782880162000312565b9250506060620003ca878288016200034d565b91505092959194509250565b608051611e50620003f96000396000818161042201526104760152611e506000f3fe6080604052600436106100fe5760003560e01c80639ad2acf511610095578063deca81f211610064578063deca81f214610329578063e3c55e4014610366578063e88958dc1461038f578063e8b161ad146103ba578063f2fde38b146103f7576100fe565b80639ad2acf51461025d578063c154962914610286578063cbc38867146102c3578063da1086a014610300576100fe565b8063715018a6116100d1578063715018a6146101c25780638da5cb5b146101d95780638dd8c56d146102045780638e4acab514610220576100fe565b80631fe543e3146101035780631fec39381461012c5780633fd430981461016957806361dad12114610185575b600080fd5b34801561010f57600080fd5b5061012a6004803603810190610125919061142d565b610420565b005b34801561013857600080fd5b50610153600480360381019061014e9190611489565b6104e0565b604051610160919061152d565b60405180910390f35b610183600480360381019061017e9190611489565b610500565b005b34801561019157600080fd5b506101ac60048036038101906101a79190611489565b61068a565b6040516101b99190611589565b60405180910390f35b3480156101ce57600080fd5b506101d76106bd565b005b3480156101e557600080fd5b506101ee610745565b6040516101fb9190611589565b60405180910390f35b61021e60048036038101906102199190611489565b61076e565b005b34801561022c57600080fd5b5061024760048036038101906102429190611489565b6108d2565b60405161025491906115b3565b60405180910390f35b34801561026957600080fd5b50610284600480360381019061027f9190611489565b6108ea565b005b34801561029257600080fd5b506102ad60048036038101906102a89190611489565b6109f8565b6040516102ba91906115b3565b60405180910390f35b3480156102cf57600080fd5b506102ea60048036038101906102e591906115ce565b610a10565b6040516102f7919061162f565b60405180910390f35b34801561030c57600080fd5b5061032760048036038101906103229190611489565b610a5e565b005b34801561033557600080fd5b50610350600480360381019061034b9190611489565b610cd4565b60405161035d91906115b3565b60405180910390f35b34801561037257600080fd5b5061038d60048036038101906103889190611489565b610cec565b005b34801561039b57600080fd5b506103a4610d72565b6040516103b191906115b3565b60405180910390f35b3480156103c657600080fd5b506103e160048036038101906103dc9190611489565b610d78565b6040516103ee91906115b3565b60405180910390f35b34801561040357600080fd5b5061041e60048036038101906104199190611676565b610d90565b005b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146104d257337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016104c99291906116a3565b60405180910390fd5b6104dc8282610e87565b5050565b60056020528060005260406000206000915054906101000a900460ff1681565b60006003811115610514576105136114b6565b5b6005600083815260200190815260200160002060009054906101000a900460ff166003811115610547576105466114b6565b5b14610587576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057e90611729565b60405180910390fd5b60036000828152602001908152602001600020543410156105dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105d4906117bb565b60405180910390fd5b3460066000838152602001908152602001600020546105fc919061180a565b600660008381526020019081526020016000208190555060086000828152602001908152602001600020339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60026020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6106c5610f92565b73ffffffffffffffffffffffffffffffffffffffff166106e3610745565b73ffffffffffffffffffffffffffffffffffffffff1614610739576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610730906118ac565b60405180910390fd5b6107436000610f9a565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6001543410156107b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107aa9061193e565b60405180910390fd5b6107bd600961105e565b60006107c96009611074565b905081600360008381526020019081526020016000208190555060006005600083815260200190815260200160002060006101000a81548160ff0219169083600381111561081a576108196114b6565b5b021790555060006006600083815260200190815260200160002081905550336002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550803373ffffffffffffffffffffffffffffffffffffffff167fe03d61f742c11525b3c0d7993f45fbf687ef314840bc5afa547d6d74f40cabb660405160405180910390a35050565b60066020528060005260406000206000915090505481565b6108f381611082565b610932576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610929906119d0565b60405180910390fd5b60006003811115610946576109456114b6565b5b6005600083815260200190815260200160002060009054906101000a900460ff166003811115610979576109786114b6565b5b146109b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109b090611729565b60405180910390fd5b60016005600083815260200190815260200160002060006101000a81548160ff021916908360038111156109f0576109ef6114b6565b5b021790555050565b60076020528060005260406000206000915090505481565b60086020528160005260406000208181548110610a2c57600080fd5b906000526020600020016000915091509054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610a6781611082565b610aa6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a9d90611a62565b60405180910390fd5b60016003811115610aba57610ab96114b6565b5b6005600083815260200190815260200160002060009054906101000a900460ff166003811115610aed57610aec6114b6565b5b14610b2d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b2490611ace565b60405180910390fd5b6000600860008381526020019081526020016000208054905011610b86576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b7d90611b3a565b60405180910390fd5b60026005600083815260200190815260200160002060006101000a81548160ff02191690836003811115610bbd57610bbc6114b6565b5b02179055506000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635d3b1d30600b54600a60149054906101000a900467ffffffffffffffff16600c60049054906101000a900461ffff16600c60009054906101000a900463ffffffff16600c60069054906101000a900463ffffffff166040518663ffffffff1660e01b8152600401610c73959493929190611bd2565b6020604051808303816000875af1158015610c92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cb69190611c3a565b90508160076000838152602001908152602001600020819055505050565b60046020528060005260406000206000915090505481565b610cf4610f92565b73ffffffffffffffffffffffffffffffffffffffff16610d12610745565b73ffffffffffffffffffffffffffffffffffffffff1614610d68576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d5f906118ac565b60405180910390fd5b8060018190555050565b60015481565b60036020528060005260406000206000915090505481565b610d98610f92565b73ffffffffffffffffffffffffffffffffffffffff16610db6610745565b73ffffffffffffffffffffffffffffffffffffffff1614610e0c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e03906118ac565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610e7b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e7290611cd9565b60405180910390fd5b610e8481610f9a565b50565b600060076000848152602001908152602001600020549050600060086000838152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015610f3457602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610eea575b505050505090506000815184600081518110610f5357610f52611cf9565b5b6020026020010151610f659190611d57565b9050610f8b83838381518110610f7e57610f7d611cf9565b5b60200260200101516110ed565b5050505050565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6001816000016000828254019250508190555050565b600081600001549050919050565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16149050919050565b60026003811115611101576111006114b6565b5b6005600084815260200190815260200160002060009054906101000a900460ff166003811115611134576111336114b6565b5b14611174576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161116b90611dfa565b60405180910390fd5b60036005600084815260200190815260200160002060006101000a81548160ff021916908360038111156111ab576111aa6114b6565b5b0217905550600060066000848152602001908152602001600020549050600060066000858152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015611227573d6000803e3d6000fd5b50600860008481526020019081526020016000206000611247919061124c565b505050565b508054600082559060005260206000209081019061126a919061126d565b50565b5b8082111561128657600081600090555060010161126e565b5090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6112b18161129e565b81146112bc57600080fd5b50565b6000813590506112ce816112a8565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611322826112d9565b810181811067ffffffffffffffff82111715611341576113406112ea565b5b80604052505050565b600061135461128a565b90506113608282611319565b919050565b600067ffffffffffffffff8211156113805761137f6112ea565b5b602082029050602081019050919050565b600080fd5b60006113a96113a484611365565b61134a565b905080838252602082019050602084028301858111156113cc576113cb611391565b5b835b818110156113f557806113e188826112bf565b8452602084019350506020810190506113ce565b5050509392505050565b600082601f830112611414576114136112d4565b5b8135611424848260208601611396565b91505092915050565b6000806040838503121561144457611443611294565b5b6000611452858286016112bf565b925050602083013567ffffffffffffffff81111561147357611472611299565b5b61147f858286016113ff565b9150509250929050565b60006020828403121561149f5761149e611294565b5b60006114ad848285016112bf565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600481106114f6576114f56114b6565b5b50565b6000819050611507826114e5565b919050565b6000611517826114f9565b9050919050565b6115278161150c565b82525050565b6000602082019050611542600083018461151e565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061157382611548565b9050919050565b61158381611568565b82525050565b600060208201905061159e600083018461157a565b92915050565b6115ad8161129e565b82525050565b60006020820190506115c860008301846115a4565b92915050565b600080604083850312156115e5576115e4611294565b5b60006115f3858286016112bf565b9250506020611604858286016112bf565b9150509250929050565b600061161982611548565b9050919050565b6116298161160e565b82525050565b60006020820190506116446000830184611620565b92915050565b61165381611568565b811461165e57600080fd5b50565b6000813590506116708161164a565b92915050565b60006020828403121561168c5761168b611294565b5b600061169a84828501611661565b91505092915050565b60006040820190506116b8600083018561157a565b6116c5602083018461157a565b9392505050565b600082825260208201905092915050565b7f536f7272792c206c6f7474657279206973206e6f74206f70656e000000000000600082015250565b6000611713601a836116cc565b915061171e826116dd565b602082019050919050565b6000602082019050818103600083015261174281611706565b9050919050565b7f4e6f7420656e6f7567682045544820746f20656e74657220746865206c6f747460008201527f6572790000000000000000000000000000000000000000000000000000000000602082015250565b60006117a56023836116cc565b91506117b082611749565b604082019050919050565b600060208201905081810360008301526117d481611798565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006118158261129e565b91506118208361129e565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611855576118546117db565b5b828201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006118966020836116cc565b91506118a182611860565b602082019050919050565b600060208201905081810360008301526118c581611889565b9050919050565b7f4e6f7420656e6f7567682045544820746f206372656174652061206c6f74746560008201527f7279000000000000000000000000000000000000000000000000000000000000602082015250565b60006119286022836116cc565b9150611933826118cc565b604082019050919050565b600060208201905081810360008301526119578161191b565b9050919050565b7f4f6e6c792063726561746f72206f6620746865206c6f74746572792063616e2060008201527f73746f702074686520656e7472616e6365730000000000000000000000000000602082015250565b60006119ba6032836116cc565b91506119c58261195e565b604082019050919050565b600060208201905081810360008301526119e9816119ad565b9050919050565b7f4f6e6c792063726561746f72206f6620746865204c6f74746572792063616e2060008201527f63616c63756c6174652077696e6e657273000000000000000000000000000000602082015250565b6000611a4c6031836116cc565b9150611a57826119f0565b604082019050919050565b60006020820190508181036000830152611a7b81611a3f565b9050919050565b7f536f7272792c206c6f7474657279206973206e6f742073746f70706564000000600082015250565b6000611ab8601d836116cc565b9150611ac382611a82565b602082019050919050565b60006020820190508181036000830152611ae781611aab565b9050919050565b7f4e6f20656e7472616e6365730000000000000000000000000000000000000000600082015250565b6000611b24600c836116cc565b9150611b2f82611aee565b602082019050919050565b60006020820190508181036000830152611b5381611b17565b9050919050565b6000819050919050565b611b6d81611b5a565b82525050565b600067ffffffffffffffff82169050919050565b611b9081611b73565b82525050565b600061ffff82169050919050565b611bad81611b96565b82525050565b600063ffffffff82169050919050565b611bcc81611bb3565b82525050565b600060a082019050611be76000830188611b64565b611bf46020830187611b87565b611c016040830186611ba4565b611c0e6060830185611bc3565b611c1b6080830184611bc3565b9695505050505050565b600081519050611c34816112a8565b92915050565b600060208284031215611c5057611c4f611294565b5b6000611c5e84828501611c25565b91505092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000611cc36026836116cc565b9150611cce82611c67565b604082019050919050565b60006020820190508181036000830152611cf281611cb6565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000611d628261129e565b9150611d6d8361129e565b925082611d7d57611d7c611d28565b5b828206905092915050565b7f536f7272792c206c6f7474657279206973206e6f7420696e2043616c63756c6160008201527f74696e6720737461746500000000000000000000000000000000000000000000602082015250565b6000611de4602a836116cc565b9150611def82611d88565b604082019050919050565b60006020820190508181036000830152611e1381611dd7565b905091905056fea2646970667358221220d07b35327ecd2fcaef0163b8007f1752f7d94e1c0f93de9a694e88e0f007ab4764736f6c634300080d0033",
  "deployedBytecode": "0x6080604052600436106100fe5760003560e01c80639ad2acf511610095578063deca81f211610064578063deca81f214610329578063e3c55e4014610366578063e88958dc1461038f578063e8b161ad146103ba578063f2fde38b146103f7576100fe565b80639ad2acf51461025d578063c154962914610286578063cbc38867146102c3578063da1086a014610300576100fe565b8063715018a6116100d1578063715018a6146101c25780638da5cb5b146101d95780638dd8c56d146102045780638e4acab514610220576100fe565b80631fe543e3146101035780631fec39381461012c5780633fd430981461016957806361dad12114610185575b600080fd5b34801561010f57600080fd5b5061012a6004803603810190610125919061142d565b610420565b005b34801561013857600080fd5b50610153600480360381019061014e9190611489565b6104e0565b604051610160919061152d565b60405180910390f35b610183600480360381019061017e9190611489565b610500565b005b34801561019157600080fd5b506101ac60048036038101906101a79190611489565b61068a565b6040516101b99190611589565b60405180910390f35b3480156101ce57600080fd5b506101d76106bd565b005b3480156101e557600080fd5b506101ee610745565b6040516101fb9190611589565b60405180910390f35b61021e60048036038101906102199190611489565b61076e565b005b34801561022c57600080fd5b5061024760048036038101906102429190611489565b6108d2565b60405161025491906115b3565b60405180910390f35b34801561026957600080fd5b50610284600480360381019061027f9190611489565b6108ea565b005b34801561029257600080fd5b506102ad60048036038101906102a89190611489565b6109f8565b6040516102ba91906115b3565b60405180910390f35b3480156102cf57600080fd5b506102ea60048036038101906102e591906115ce565b610a10565b6040516102f7919061162f565b60405180910390f35b34801561030c57600080fd5b5061032760048036038101906103229190611489565b610a5e565b005b34801561033557600080fd5b50610350600480360381019061034b9190611489565b610cd4565b60405161035d91906115b3565b60405180910390f35b34801561037257600080fd5b5061038d60048036038101906103889190611489565b610cec565b005b34801561039b57600080fd5b506103a4610d72565b6040516103b191906115b3565b60405180910390f35b3480156103c657600080fd5b506103e160048036038101906103dc9190611489565b610d78565b6040516103ee91906115b3565b60405180910390f35b34801561040357600080fd5b5061041e60048036038101906104199190611676565b610d90565b005b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146104d257337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016104c99291906116a3565b60405180910390fd5b6104dc8282610e87565b5050565b60056020528060005260406000206000915054906101000a900460ff1681565b60006003811115610514576105136114b6565b5b6005600083815260200190815260200160002060009054906101000a900460ff166003811115610547576105466114b6565b5b14610587576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057e90611729565b60405180910390fd5b60036000828152602001908152602001600020543410156105dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105d4906117bb565b60405180910390fd5b3460066000838152602001908152602001600020546105fc919061180a565b600660008381526020019081526020016000208190555060086000828152602001908152602001600020339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60026020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6106c5610f92565b73ffffffffffffffffffffffffffffffffffffffff166106e3610745565b73ffffffffffffffffffffffffffffffffffffffff1614610739576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610730906118ac565b60405180910390fd5b6107436000610f9a565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6001543410156107b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107aa9061193e565b60405180910390fd5b6107bd600961105e565b60006107c96009611074565b905081600360008381526020019081526020016000208190555060006005600083815260200190815260200160002060006101000a81548160ff0219169083600381111561081a576108196114b6565b5b021790555060006006600083815260200190815260200160002081905550336002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550803373ffffffffffffffffffffffffffffffffffffffff167fe03d61f742c11525b3c0d7993f45fbf687ef314840bc5afa547d6d74f40cabb660405160405180910390a35050565b60066020528060005260406000206000915090505481565b6108f381611082565b610932576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610929906119d0565b60405180910390fd5b60006003811115610946576109456114b6565b5b6005600083815260200190815260200160002060009054906101000a900460ff166003811115610979576109786114b6565b5b146109b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109b090611729565b60405180910390fd5b60016005600083815260200190815260200160002060006101000a81548160ff021916908360038111156109f0576109ef6114b6565b5b021790555050565b60076020528060005260406000206000915090505481565b60086020528160005260406000208181548110610a2c57600080fd5b906000526020600020016000915091509054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610a6781611082565b610aa6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a9d90611a62565b60405180910390fd5b60016003811115610aba57610ab96114b6565b5b6005600083815260200190815260200160002060009054906101000a900460ff166003811115610aed57610aec6114b6565b5b14610b2d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b2490611ace565b60405180910390fd5b6000600860008381526020019081526020016000208054905011610b86576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b7d90611b3a565b60405180910390fd5b60026005600083815260200190815260200160002060006101000a81548160ff02191690836003811115610bbd57610bbc6114b6565b5b02179055506000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635d3b1d30600b54600a60149054906101000a900467ffffffffffffffff16600c60049054906101000a900461ffff16600c60009054906101000a900463ffffffff16600c60069054906101000a900463ffffffff166040518663ffffffff1660e01b8152600401610c73959493929190611bd2565b6020604051808303816000875af1158015610c92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cb69190611c3a565b90508160076000838152602001908152602001600020819055505050565b60046020528060005260406000206000915090505481565b610cf4610f92565b73ffffffffffffffffffffffffffffffffffffffff16610d12610745565b73ffffffffffffffffffffffffffffffffffffffff1614610d68576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d5f906118ac565b60405180910390fd5b8060018190555050565b60015481565b60036020528060005260406000206000915090505481565b610d98610f92565b73ffffffffffffffffffffffffffffffffffffffff16610db6610745565b73ffffffffffffffffffffffffffffffffffffffff1614610e0c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e03906118ac565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610e7b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e7290611cd9565b60405180910390fd5b610e8481610f9a565b50565b600060076000848152602001908152602001600020549050600060086000838152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015610f3457602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610eea575b505050505090506000815184600081518110610f5357610f52611cf9565b5b6020026020010151610f659190611d57565b9050610f8b83838381518110610f7e57610f7d611cf9565b5b60200260200101516110ed565b5050505050565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6001816000016000828254019250508190555050565b600081600001549050919050565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16149050919050565b60026003811115611101576111006114b6565b5b6005600084815260200190815260200160002060009054906101000a900460ff166003811115611134576111336114b6565b5b14611174576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161116b90611dfa565b60405180910390fd5b60036005600084815260200190815260200160002060006101000a81548160ff021916908360038111156111ab576111aa6114b6565b5b0217905550600060066000848152602001908152602001600020549050600060066000858152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015611227573d6000803e3d6000fd5b50600860008481526020019081526020016000206000611247919061124c565b505050565b508054600082559060005260206000209081019061126a919061126d565b50565b5b8082111561128657600081600090555060010161126e565b5090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6112b18161129e565b81146112bc57600080fd5b50565b6000813590506112ce816112a8565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611322826112d9565b810181811067ffffffffffffffff82111715611341576113406112ea565b5b80604052505050565b600061135461128a565b90506113608282611319565b919050565b600067ffffffffffffffff8211156113805761137f6112ea565b5b602082029050602081019050919050565b600080fd5b60006113a96113a484611365565b61134a565b905080838252602082019050602084028301858111156113cc576113cb611391565b5b835b818110156113f557806113e188826112bf565b8452602084019350506020810190506113ce565b5050509392505050565b600082601f830112611414576114136112d4565b5b8135611424848260208601611396565b91505092915050565b6000806040838503121561144457611443611294565b5b6000611452858286016112bf565b925050602083013567ffffffffffffffff81111561147357611472611299565b5b61147f858286016113ff565b9150509250929050565b60006020828403121561149f5761149e611294565b5b60006114ad848285016112bf565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600481106114f6576114f56114b6565b5b50565b6000819050611507826114e5565b919050565b6000611517826114f9565b9050919050565b6115278161150c565b82525050565b6000602082019050611542600083018461151e565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061157382611548565b9050919050565b61158381611568565b82525050565b600060208201905061159e600083018461157a565b92915050565b6115ad8161129e565b82525050565b60006020820190506115c860008301846115a4565b92915050565b600080604083850312156115e5576115e4611294565b5b60006115f3858286016112bf565b9250506020611604858286016112bf565b9150509250929050565b600061161982611548565b9050919050565b6116298161160e565b82525050565b60006020820190506116446000830184611620565b92915050565b61165381611568565b811461165e57600080fd5b50565b6000813590506116708161164a565b92915050565b60006020828403121561168c5761168b611294565b5b600061169a84828501611661565b91505092915050565b60006040820190506116b8600083018561157a565b6116c5602083018461157a565b9392505050565b600082825260208201905092915050565b7f536f7272792c206c6f7474657279206973206e6f74206f70656e000000000000600082015250565b6000611713601a836116cc565b915061171e826116dd565b602082019050919050565b6000602082019050818103600083015261174281611706565b9050919050565b7f4e6f7420656e6f7567682045544820746f20656e74657220746865206c6f747460008201527f6572790000000000000000000000000000000000000000000000000000000000602082015250565b60006117a56023836116cc565b91506117b082611749565b604082019050919050565b600060208201905081810360008301526117d481611798565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006118158261129e565b91506118208361129e565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611855576118546117db565b5b828201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006118966020836116cc565b91506118a182611860565b602082019050919050565b600060208201905081810360008301526118c581611889565b9050919050565b7f4e6f7420656e6f7567682045544820746f206372656174652061206c6f74746560008201527f7279000000000000000000000000000000000000000000000000000000000000602082015250565b60006119286022836116cc565b9150611933826118cc565b604082019050919050565b600060208201905081810360008301526119578161191b565b9050919050565b7f4f6e6c792063726561746f72206f6620746865206c6f74746572792063616e2060008201527f73746f702074686520656e7472616e6365730000000000000000000000000000602082015250565b60006119ba6032836116cc565b91506119c58261195e565b604082019050919050565b600060208201905081810360008301526119e9816119ad565b9050919050565b7f4f6e6c792063726561746f72206f6620746865204c6f74746572792063616e2060008201527f63616c63756c6174652077696e6e657273000000000000000000000000000000602082015250565b6000611a4c6031836116cc565b9150611a57826119f0565b604082019050919050565b60006020820190508181036000830152611a7b81611a3f565b9050919050565b7f536f7272792c206c6f7474657279206973206e6f742073746f70706564000000600082015250565b6000611ab8601d836116cc565b9150611ac382611a82565b602082019050919050565b60006020820190508181036000830152611ae781611aab565b9050919050565b7f4e6f20656e7472616e6365730000000000000000000000000000000000000000600082015250565b6000611b24600c836116cc565b9150611b2f82611aee565b602082019050919050565b60006020820190508181036000830152611b5381611b17565b9050919050565b6000819050919050565b611b6d81611b5a565b82525050565b600067ffffffffffffffff82169050919050565b611b9081611b73565b82525050565b600061ffff82169050919050565b611bad81611b96565b82525050565b600063ffffffff82169050919050565b611bcc81611bb3565b82525050565b600060a082019050611be76000830188611b64565b611bf46020830187611b87565b611c016040830186611ba4565b611c0e6060830185611bc3565b611c1b6080830184611bc3565b9695505050505050565b600081519050611c34816112a8565b92915050565b600060208284031215611c5057611c4f611294565b5b6000611c5e84828501611c25565b91505092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000611cc36026836116cc565b9150611cce82611c67565b604082019050919050565b60006020820190508181036000830152611cf281611cb6565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000611d628261129e565b9150611d6d8361129e565b925082611d7d57611d7c611d28565b5b828206905092915050565b7f536f7272792c206c6f7474657279206973206e6f7420696e2043616c63756c6160008201527f74696e6720737461746500000000000000000000000000000000000000000000602082015250565b6000611de4602a836116cc565b9150611def82611d88565b604082019050919050565b60006020820190508181036000830152611e1381611dd7565b905091905056fea2646970667358221220d07b35327ecd2fcaef0163b8007f1752f7d94e1c0f93de9a694e88e0f007ab4764736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 154,
        "contract": "contracts/LotteryMaker.sol:LotteryMaker",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 374,
        "contract": "contracts/LotteryMaker.sol:LotteryMaker",
        "label": "creatorFee",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 378,
        "contract": "contracts/LotteryMaker.sol:LotteryMaker",
        "label": "lotteryIDOwnerMapping",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 382,
        "contract": "contracts/LotteryMaker.sol:LotteryMaker",
        "label": "lotteryIDFeeMapping",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 386,
        "contract": "contracts/LotteryMaker.sol:LotteryMaker",
        "label": "lotteryIDDurationMapping",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 391,
        "contract": "contracts/LotteryMaker.sol:LotteryMaker",
        "label": "lotteryIDStateMapping",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_enum(LotteryState)366)"
      },
      {
        "astId": 395,
        "contract": "contracts/LotteryMaker.sol:LotteryMaker",
        "label": "lotteryIDBalanceMapping",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 399,
        "contract": "contracts/LotteryMaker.sol:LotteryMaker",
        "label": "requestIDLotteryIDMapping",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 404,
        "contract": "contracts/LotteryMaker.sol:LotteryMaker",
        "label": "lotteryIDEntrancesMapping",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_array(t_address_payable)dyn_storage)"
      },
      {
        "astId": 407,
        "contract": "contracts/LotteryMaker.sol:LotteryMaker",
        "label": "lotteryIDCounter",
        "offset": 0,
        "slot": "9",
        "type": "t_struct(Counter)279_storage"
      },
      {
        "astId": 410,
        "contract": "contracts/LotteryMaker.sol:LotteryMaker",
        "label": "COORDINATOR",
        "offset": 0,
        "slot": "10",
        "type": "t_contract(VRFCoordinatorV2Interface)146"
      },
      {
        "astId": 412,
        "contract": "contracts/LotteryMaker.sol:LotteryMaker",
        "label": "s_subscriptionId",
        "offset": 20,
        "slot": "10",
        "type": "t_uint64"
      },
      {
        "astId": 414,
        "contract": "contracts/LotteryMaker.sol:LotteryMaker",
        "label": "keyHash",
        "offset": 0,
        "slot": "11",
        "type": "t_bytes32"
      },
      {
        "astId": 417,
        "contract": "contracts/LotteryMaker.sol:LotteryMaker",
        "label": "callbackGasLimit",
        "offset": 0,
        "slot": "12",
        "type": "t_uint32"
      },
      {
        "astId": 420,
        "contract": "contracts/LotteryMaker.sol:LotteryMaker",
        "label": "requestConfirmations",
        "offset": 4,
        "slot": "12",
        "type": "t_uint16"
      },
      {
        "astId": 423,
        "contract": "contracts/LotteryMaker.sol:LotteryMaker",
        "label": "numWords",
        "offset": 6,
        "slot": "12",
        "type": "t_uint32"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address_payable)dyn_storage": {
        "base": "t_address_payable",
        "encoding": "dynamic_array",
        "label": "address payable[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(VRFCoordinatorV2Interface)146": {
        "encoding": "inplace",
        "label": "contract VRFCoordinatorV2Interface",
        "numberOfBytes": "20"
      },
      "t_enum(LotteryState)366": {
        "encoding": "inplace",
        "label": "enum LotteryMaker.LotteryState",
        "numberOfBytes": "1"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_array(t_address_payable)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address payable[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address_payable)dyn_storage"
      },
      "t_mapping(t_uint256,t_enum(LotteryState)366)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => enum LotteryMaker.LotteryState)",
        "numberOfBytes": "32",
        "value": "t_enum(LotteryState)366"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Counter)279_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 278,
            "contract": "contracts/LotteryMaker.sol:LotteryMaker",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}