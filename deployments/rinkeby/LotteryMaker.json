{
  "address": "0x1D04d42236E237E855189F6dA4ebf6079553B321",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_creatorFee",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_vrfCoordinator",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "_subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "bytes32",
          "name": "_keyHash",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "lotteryID",
          "type": "uint256"
        }
      ],
      "name": "LotteryCreatedEvent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "lotteryID",
          "type": "uint256"
        }
      ],
      "name": "WinnerCalculatedEvent",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lotteryID",
          "type": "uint256"
        }
      ],
      "name": "calculateWinner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newFee",
          "type": "uint256"
        }
      ],
      "name": "changeCreatorFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "entranceFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        }
      ],
      "name": "createLimitedLottery",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "entranceFee",
          "type": "uint256"
        }
      ],
      "name": "createLottery",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "creatorFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lotteryID",
          "type": "uint256"
        }
      ],
      "name": "enterLottery",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lotteryID",
          "type": "uint256"
        }
      ],
      "name": "getAllEntrances",
      "outputs": [
        {
          "internalType": "address payable[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "lotteryIDBalanceMapping",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "lotteryIDEndtimeMapping",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "lotteryIDEntrancesMapping",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "lotteryIDFeeMapping",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "lotteryIDOwnerMapping",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "lotteryIDStateMapping",
      "outputs": [
        {
          "internalType": "enum LotteryMaker.LotteryState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "lotteryIDToCheckDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "requestIDLotteryIDMapping",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lotteryID",
          "type": "uint256"
        }
      ],
      "name": "stopEntrance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x363a0ac0a44c732ff537fca56a40c06bd19ad27f5db5b4447e54d5bac0aaeb6e",
  "receipt": {
    "to": null,
    "from": "0x6B75f6c15E34eEfE458FD713fD016C6d515436AC",
    "contractAddress": "0x1D04d42236E237E855189F6dA4ebf6079553B321",
    "transactionIndex": 42,
    "gasUsed": "2293685",
    "logsBloom": "0x
    "blockHash": "0xeea49dad88587ea51069195eccb9a822502a2d0ccec7664b04b89e0c9d6503e7",
    "transactionHash": "0x363a0ac0a44c732ff537fca56a40c06bd19ad27f5db5b4447e54d5bac0aaeb6e",
    "logs": [
      {
        "transactionIndex": 42,
        "blockNumber": 10902044,
        "transactionHash": "0x363a0ac0a44c732ff537fca56a40c06bd19ad27f5db5b4447e54d5bac0aaeb6e",
        "address": "0x1D04d42236E237E855189F6dA4ebf6079553B321",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000006b75f6c15e34eefe458fd713fd016c6d515436ac"
        ],
        "data": "0x",
        "logIndex": 110,
        "blockHash": "0xeea49dad88587ea51069195eccb9a822502a2d0ccec7664b04b89e0c9d6503e7"
      }
    ],
    "blockNumber": 10902044,
    "cumulativeGasUsed": "17593900",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "1000000000000000",
    "0x6168499c0cFfCaCD319c818142124B7A15E857ab",
    "4307",
    "0xd89b2bf150e3b9e13446986e571fb9cab24b13cea0a43ea20a6049a85cc807cc"
  ],
  "numDeployments": 9,
  "solcInputHash": "045cbdf949622f0c3b4c900166abc6a9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_creatorFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_vrfCoordinator\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"_keyHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"lotteryID\",\"type\":\"uint256\"}],\"name\":\"LotteryCreatedEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"lotteryID\",\"type\":\"uint256\"}],\"name\":\"WinnerCalculatedEvent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lotteryID\",\"type\":\"uint256\"}],\"name\":\"calculateWinner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newFee\",\"type\":\"uint256\"}],\"name\":\"changeCreatorFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"entranceFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"createLimitedLottery\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"entranceFee\",\"type\":\"uint256\"}],\"name\":\"createLottery\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creatorFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lotteryID\",\"type\":\"uint256\"}],\"name\":\"enterLottery\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lotteryID\",\"type\":\"uint256\"}],\"name\":\"getAllEntrances\",\"outputs\":[{\"internalType\":\"address payable[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lotteryIDBalanceMapping\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lotteryIDEndtimeMapping\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lotteryIDEntrancesMapping\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lotteryIDFeeMapping\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lotteryIDOwnerMapping\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lotteryIDStateMapping\",\"outputs\":[{\"internalType\":\"enum LotteryMaker.LotteryState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lotteryIDToCheckDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"requestIDLotteryIDMapping\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lotteryID\",\"type\":\"uint256\"}],\"name\":\"stopEntrance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LotteryMaker.sol\":\"LotteryMaker\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/KeeperBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract KeeperBase {\\n  error OnlySimulatedBackend();\\n\\n  /**\\n   * @notice method that allows it to be simulated via eth_call by checking that\\n   * the sender is the zero address.\\n   */\\n  function preventExecution() internal view {\\n    if (tx.origin != address(0)) {\\n      revert OnlySimulatedBackend();\\n    }\\n  }\\n\\n  /**\\n   * @notice modifier that allows it to be simulated via eth_call by checking\\n   * that the sender is the zero address.\\n   */\\n  modifier cannotExecute() {\\n    preventExecution();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x5dc972fdf3a524312e68ef6d2e58bcdaf965d08d9415aefa289207350c2bc85a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/KeeperCompatible.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./KeeperBase.sol\\\";\\nimport \\\"./interfaces/KeeperCompatibleInterface.sol\\\";\\n\\nabstract contract KeeperCompatible is KeeperBase, KeeperCompatibleInterface {}\\n\",\"keccak256\":\"0xfdb84fea1ee213662ae66b95d4f620be73b7af5ede58be3d330b222b9b566d95\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0xec8b7e3032e887dd0732d2a5f8552ddce64a99a81b0008ef0bcf6cad68a535fc\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface KeeperCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0xb6577cda6b731b655aebcb6e3c24f8658d3f4c5eda07200622d07d4570af33ea\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n}\\n\",\"keccak256\":\"0xcb29ee50ee2b05441e4deebf8b4756a0feec4f5497e36b6a1ca320f7ce561802\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"contracts/LotteryMaker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// import \\\"hardhat/console.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/KeeperCompatible.sol\\\";\\n\\ncontract LotteryMaker is Ownable, VRFConsumerBaseV2, KeeperCompatibleInterface {\\n    using Counters for Counters.Counter;\\n    enum LotteryState { Open, Stopped, Calculating, MoneyTransfered }\\n    event LotteryCreatedEvent(address indexed owner, uint indexed lotteryID);\\n    event WinnerCalculatedEvent(address indexed winner, uint indexed lotteryID);\\n\\n    uint public creatorFee;    \\n    mapping(uint => address) public lotteryIDOwnerMapping;\\n    mapping(uint => uint) public lotteryIDFeeMapping;\\n    mapping(uint => uint) public lotteryIDEndtimeMapping;\\n    uint[] public lotteryIDToCheckDuration;\\n    mapping(uint => LotteryState) public lotteryIDStateMapping;\\n    mapping(uint => uint) public lotteryIDBalanceMapping;\\n    mapping(uint => uint) public requestIDLotteryIDMapping;\\n    mapping(uint => address payable[]) public lotteryIDEntrancesMapping;\\n    Counters.Counter private lotteryIDCounter;\\n\\n    // Random number params\\n    VRFCoordinatorV2Interface COORDINATOR;\\n\\n    // Your subscription ID.\\n    uint64 s_subscriptionId;    \\n\\n    // The gas lane to use, which specifies the maximum gas price to bump to.\\n    // For a list of available gas lanes on each network,\\n    // see https://docs.chain.link/docs/vrf-contracts/#configurations\\n    bytes32 keyHash;\\n\\n    // Depends on the number of requested values that you want sent to the\\n    // fulfillRandomWords() function. Storing each word costs about 20,000 gas,\\n    // so 100,000 is a safe default for this example contract. Test and adjust\\n    // this limit based on the network that you select, the size of the request,\\n    // and the processing of the callback request in the fulfillRandomWords()\\n    // function.\\n    uint32 callbackGasLimit = 100000;    \\n    uint16 requestConfirmations = 3;\\n    // For this example, retrieve 2 random values in one request.\\n    // Cannot exceed VRFCoordinatorV2.MAX_NUM_WORDS.\\n    uint32 numWords = 1;\\n\\n    constructor(\\n        uint _creatorFee,\\n        address _vrfCoordinator,\\n        uint64 _subscriptionId,\\n        bytes32 _keyHash)\\n            VRFConsumerBaseV2(_vrfCoordinator)\\n    {\\n        COORDINATOR = VRFCoordinatorV2Interface(_vrfCoordinator);\\n        creatorFee = _creatorFee;\\n        s_subscriptionId = _subscriptionId;\\n        keyHash = _keyHash;\\n    }\\n\\n    function getAllEntrances(uint lotteryID) public view returns (address payable [] memory) {\\n        return lotteryIDEntrancesMapping[lotteryID];\\n    }\\n\\n    function changeCreatorFee(uint _newFee) public onlyOwner {\\n        creatorFee = _newFee;\\n    }\\n\\n    function createLotteryInternal(uint entranceFee)\\n        internal returns(uint)\\n    {\\n        lotteryIDCounter.increment();\\n        uint lotteryID = lotteryIDCounter.current();        \\n        lotteryIDFeeMapping[lotteryID] = entranceFee;\\n        lotteryIDStateMapping[lotteryID] = LotteryState.Open;\\n        lotteryIDBalanceMapping[lotteryID] = 0;\\n        lotteryIDOwnerMapping[lotteryID] = msg.sender;\\n        emit LotteryCreatedEvent(msg.sender, lotteryID);\\n        return lotteryID;\\n    }\\n\\n    function createLottery(uint entranceFee)\\n        external payable \\n    {\\n        require(msg.value >= creatorFee, \\\"Not enough ETH to create a lottery\\\");\\n        createLotteryInternal(entranceFee);\\n    }\\n\\n    /* \\n        entranceFee in Wei\\n        duration in seconds\\n    */\\n    function createLimitedLottery(uint entranceFee, uint duration)\\n        external payable \\n    {\\n        require(msg.value >= creatorFee, \\\"Not enough ETH to create a lottery\\\");        \\n        uint lotteryID = createLotteryInternal(entranceFee);\\n        lotteryIDEndtimeMapping[lotteryID] = block.timestamp + duration;\\n        lotteryIDToCheckDuration.push(lotteryID);\\n    }\\n\\n    function enterLottery(uint lotteryID) external payable {\\n        require(lotteryIDStateMapping[lotteryID] == LotteryState.Open, \\\"Sorry, lottery is not open\\\");\\n        require(msg.value >= lotteryIDFeeMapping[lotteryID], \\\"Not enough ETH to enter the lottery\\\");\\n        lotteryIDBalanceMapping[lotteryID] = lotteryIDBalanceMapping[lotteryID] + msg.value;\\n        lotteryIDEntrancesMapping[lotteryID].push(payable(msg.sender));\\n    }\\n\\n    function stopEntrance(uint lotteryID) external {\\n        require(msg.sender == lotteryIDOwnerMapping[lotteryID], \\\"Only creator of the lottery can stop the entrances\\\");\\n        require(lotteryIDStateMapping[lotteryID] == LotteryState.Open, \\\"Sorry, lottery is not open\\\");\\n        lotteryIDStateMapping[lotteryID] = LotteryState.Stopped;\\n    }\\n\\n    function calculateWinner(uint lotteryID) external {\\n        require(msg.sender == lotteryIDOwnerMapping[lotteryID], \\\"Only creator of the Lottery can calculate winners\\\");\\n        require(lotteryIDStateMapping[lotteryID] == LotteryState.Stopped, \\\"Sorry, lottery is not stopped\\\");\\n        require(lotteryIDEntrancesMapping[lotteryID].length > 0, \\\"No entrances\\\");\\n        lotteryIDStateMapping[lotteryID] = LotteryState.Calculating;\\n        uint s_requestId = COORDINATOR.requestRandomWords(\\n            keyHash,\\n            s_subscriptionId,\\n            requestConfirmations,\\n            callbackGasLimit,\\n            numWords\\n        );\\n        requestIDLotteryIDMapping[s_requestId] = lotteryID;\\n    }\\n\\n    function fulfillRandomWords(\\n        uint256 requestID, /* requestId */\\n        uint256[] memory randomWords\\n    ) internal override {\\n        uint lotteryID = requestIDLotteryIDMapping[requestID];\\n        address payable[] memory entrances = lotteryIDEntrancesMapping[lotteryID];\\n        uint winnerNumber = randomWords[0] % entrances.length;\\n        winnerCalculated(lotteryID, entrances[winnerNumber]);\\n    }\\n\\n    function winnerCalculated(uint lotteryID, address payable winnerAddress) internal {        \\n        require(lotteryIDStateMapping[lotteryID] == LotteryState.Calculating, \\\"Sorry, lottery is not in Calculating state\\\");\\n        lotteryIDStateMapping[lotteryID] = LotteryState.MoneyTransfered;\\n        uint toTransfer = lotteryIDBalanceMapping[lotteryID];\\n        lotteryIDBalanceMapping[lotteryID] = 0;\\n        winnerAddress.transfer(toTransfer);\\n        delete lotteryIDEntrancesMapping[lotteryID];\\n        emit WinnerCalculatedEvent(winnerAddress, lotteryID);\\n    }\\n\\n    function checkUpkeep(bytes calldata)\\n     external view override \\n     returns (bool upkeepNeeded, bytes memory) \\n    {\\n        upkeepNeeded = false;        \\n        uint arrayLength = lotteryIDToCheckDuration.length;// totalValue auto init to 0        \\n        for (uint i=0; i < arrayLength; i++) {\\n            uint lotteryID = lotteryIDToCheckDuration[i];\\n            upkeepNeeded = upkeepNeeded || \\n                (lotteryIDEntrancesMapping[lotteryID].length > 0\\n                &&\\n                lotteryIDEndtimeMapping[lotteryID] < block.timestamp\\n                &&\\n                lotteryIDStateMapping[lotteryID] == LotteryState.Open);\\n            if (upkeepNeeded) {\\n                return (true, \\\"\\\");\\n            }\\n        }\\n    }\\n\\n    function performUpkeep(bytes calldata /* performData */) external override {\\n        //We highly recommend revalidating the upkeep in the performUpkeep function\\n        uint arrayLength = lotteryIDToCheckDuration.length;// totalValue auto init to 0        \\n        for (uint i=0; i < arrayLength; i++) {\\n            uint lotteryID = lotteryIDToCheckDuration[i];\\n            if (lotteryIDEntrancesMapping[lotteryID].length > 0\\n                &&\\n                lotteryIDEndtimeMapping[lotteryID] < block.timestamp\\n                &&\\n                lotteryIDStateMapping[lotteryID] == LotteryState.Open) {\\n                lotteryIDStateMapping[lotteryID] = LotteryState.Stopped;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa9ad5883f34bd32ffeefea6ee81a2aaa82b5240e5c6fd4e5336e36840eea8507\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a0604052620186a0600d60006101000a81548163ffffffff021916908363ffffffff1602179055506003600d60046101000a81548161ffff021916908361ffff1602179055506001600d60066101000a81548163ffffffff021916908363ffffffff1602179055503480156200007557600080fd5b5060405162002a5738038062002a5783398181016040528101906200009b919062000364565b82620000bc620000b06200017360201b60201c565b6200017b60201b60201c565b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250505082600b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508360018190555081600b60146101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555080600c8190555050505050620003d6565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b6000819050919050565b620002598162000244565b81146200026557600080fd5b50565b60008151905062000279816200024e565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620002ac826200027f565b9050919050565b620002be816200029f565b8114620002ca57600080fd5b50565b600081519050620002de81620002b3565b92915050565b600067ffffffffffffffff82169050919050565b6200030381620002e4565b81146200030f57600080fd5b50565b6000815190506200032381620002f8565b92915050565b6000819050919050565b6200033e8162000329565b81146200034a57600080fd5b50565b6000815190506200035e8162000333565b92915050565b600080600080608085870312156200038157620003806200023f565b5b6000620003918782880162000268565b9450506020620003a487828801620002cd565b9350506040620003b78782880162000312565b9250506060620003ca878288016200034d565b91505092959194509250565b60805161265e620003f9600039600081816105f7015261064b015261265e6000f3fe6080604052600436106101355760003560e01c80638e4acab5116100ab578063da1086a01161006f578063da1086a014610455578063e1d1033d1461047e578063e3c55e401461049a578063e88958dc146104c3578063e8b161ad146104ee578063f2fde38b1461052b57610135565b80638e4acab5146103385780639ad2acf5146103755780639bb1e5b61461039e578063c1549629146103db578063cbc388671461041857610135565b80634585e33b116100fd5780634585e33b1461023657806361dad1211461025f5780636e04ff0d1461029c578063715018a6146102da5780638da5cb5b146102f15780638dd8c56d1461031c57610135565b80631ecbcbf51461013a5780631fe543e3146101775780631fec3938146101a05780632bc5f392146101dd5780633fd430981461021a575b600080fd5b34801561014657600080fd5b50610161600480360381019061015c919061183f565b610554565b60405161016e919061195c565b60405180910390f35b34801561018357600080fd5b5061019e60048036038101906101999190611ad7565b6105f5565b005b3480156101ac57600080fd5b506101c760048036038101906101c2919061183f565b6106b5565b6040516101d49190611baa565b60405180910390f35b3480156101e957600080fd5b5061020460048036038101906101ff919061183f565b6106d5565b6040516102119190611bd4565b60405180910390f35b610234600480360381019061022f919061183f565b6106f9565b005b34801561024257600080fd5b5061025d60048036038101906102589190611c4a565b610883565b005b34801561026b57600080fd5b506102866004803603810190610281919061183f565b61099f565b6040516102939190611cb8565b60405180910390f35b3480156102a857600080fd5b506102c360048036038101906102be9190611c4a565b6109d2565b6040516102d1929190611d76565b60405180910390f35b3480156102e657600080fd5b506102ef610ae6565b005b3480156102fd57600080fd5b50610306610b6e565b6040516103139190611cb8565b60405180910390f35b6103366004803603810190610331919061183f565b610b97565b005b34801561034457600080fd5b5061035f600480360381019061035a919061183f565b610be9565b60405161036c9190611bd4565b60405180910390f35b34801561038157600080fd5b5061039c6004803603810190610397919061183f565b610c01565b005b3480156103aa57600080fd5b506103c560048036038101906103c0919061183f565b610d68565b6040516103d29190611bd4565b60405180910390f35b3480156103e757600080fd5b5061040260048036038101906103fd919061183f565b610d80565b60405161040f9190611bd4565b60405180910390f35b34801561042457600080fd5b5061043f600480360381019061043a9190611da6565b610d98565b60405161044c9190611df5565b60405180910390f35b34801561046157600080fd5b5061047c6004803603810190610477919061183f565b610de6565b005b61049860048036038101906104939190611da6565b6110b5565b005b3480156104a657600080fd5b506104c160048036038101906104bc919061183f565b611158565b005b3480156104cf57600080fd5b506104d86111de565b6040516104e59190611bd4565b60405180910390f35b3480156104fa57600080fd5b506105156004803603810190610510919061183f565b6111e4565b6040516105229190611bd4565b60405180910390f35b34801561053757600080fd5b50610552600480360381019061054d9190611e3c565b6111fc565b005b6060600960008381526020019081526020016000208054806020026020016040519081016040528092919081815260200182805480156105e957602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161059f575b50505050509050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106a757337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f400000000000000000000000000000000000000000000000000000000815260040161069e929190611e69565b60405180910390fd5b6106b182826112f3565b5050565b60066020528060005260406000206000915054906101000a900460ff1681565b600581815481106106e557600080fd5b906000526020600020016000915090505481565b6000600381111561070d5761070c611b33565b5b6006600083815260200190815260200160002060009054906101000a900460ff1660038111156107405761073f611b33565b5b14610780576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161077790611eef565b60405180910390fd5b60036000828152602001908152602001600020543410156107d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107cd90611f81565b60405180910390fd5b3460076000838152602001908152602001600020546107f59190611fd0565b600760008381526020019081526020016000208190555060096000828152602001908152602001600020339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600580549050905060005b81811015610999576000600582815481106108ae576108ad612026565b5b90600052602060002001549050600060096000838152602001908152602001600020805490501180156108f35750426004600083815260200190815260200160002054105b801561094357506000600381111561090e5761090d611b33565b5b6006600083815260200190815260200160002060009054906101000a900460ff16600381111561094157610940611b33565b5b145b156109855760016006600083815260200190815260200160002060006101000a81548160ff0219169083600381111561097f5761097e611b33565b5b02179055505b50808061099190612055565b915050610890565b50505050565b60026020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006060600091506000600580549050905060005b81811015610adc57600060058281548110610a0557610a04612026565b5b906000526020600020015490508480610aa2575060006009600083815260200190815260200160002080549050118015610a515750426004600083815260200190815260200160002054105b8015610aa1575060006003811115610a6c57610a6b611b33565b5b6006600083815260200190815260200160002060009054906101000a900460ff166003811115610a9f57610a9e611b33565b5b145b5b94508415610ac85760016040518060200160405280600081525094509450505050610adf565b508080610ad490612055565b9150506109e7565b50505b9250929050565b610aee6113fe565b73ffffffffffffffffffffffffffffffffffffffff16610b0c610b6e565b73ffffffffffffffffffffffffffffffffffffffff1614610b62576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b59906120e9565b60405180910390fd5b610b6c6000611406565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600154341015610bdc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bd39061217b565b60405180910390fd5b610be5816114ca565b5050565b60076020528060005260406000206000915090505481565b6002600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610ca2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c999061220d565b60405180910390fd5b60006003811115610cb657610cb5611b33565b5b6006600083815260200190815260200160002060009054906101000a900460ff166003811115610ce957610ce8611b33565b5b14610d29576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d2090611eef565b60405180910390fd5b60016006600083815260200190815260200160002060006101000a81548160ff02191690836003811115610d6057610d5f611b33565b5b021790555050565b60046020528060005260406000206000915090505481565b60086020528060005260406000206000915090505481565b60096020528160005260406000208181548110610db457600080fd5b906000526020600020016000915091509054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6002600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610e87576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e7e9061229f565b60405180910390fd5b60016003811115610e9b57610e9a611b33565b5b6006600083815260200190815260200160002060009054906101000a900460ff166003811115610ece57610ecd611b33565b5b14610f0e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f059061230b565b60405180910390fd5b6000600960008381526020019081526020016000208054905011610f67576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f5e90612377565b60405180910390fd5b60026006600083815260200190815260200160002060006101000a81548160ff02191690836003811115610f9e57610f9d611b33565b5b02179055506000600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635d3b1d30600c54600b60149054906101000a900467ffffffffffffffff16600d60049054906101000a900461ffff16600d60009054906101000a900463ffffffff16600d60069054906101000a900463ffffffff166040518663ffffffff1660e01b815260040161105495949392919061240f565b6020604051808303816000875af1158015611073573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110979190612477565b90508160086000838152602001908152602001600020819055505050565b6001543410156110fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110f19061217b565b60405180910390fd5b6000611105836114ca565b905081426111139190611fd0565b60046000838152602001908152602001600020819055506005819080600181540180825580915050600190039060005260206000200160009091909190915055505050565b6111606113fe565b73ffffffffffffffffffffffffffffffffffffffff1661117e610b6e565b73ffffffffffffffffffffffffffffffffffffffff16146111d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111cb906120e9565b60405180910390fd5b8060018190555050565b60015481565b60036020528060005260406000206000915090505481565b6112046113fe565b73ffffffffffffffffffffffffffffffffffffffff16611222610b6e565b73ffffffffffffffffffffffffffffffffffffffff1614611278576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161126f906120e9565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036112e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112de90612516565b60405180910390fd5b6112f081611406565b50565b6000600860008481526020019081526020016000205490506000600960008381526020019081526020016000208054806020026020016040519081016040528092919081815260200182805480156113a057602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611356575b5050505050905060008151846000815181106113bf576113be612026565b5b60200260200101516113d19190612565565b90506113f7838383815181106113ea576113e9612026565b5b60200260200101516115f0565b5050505050565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60006114d6600a611793565b60006114e2600a6117a9565b905082600360008381526020019081526020016000208190555060006006600083815260200190815260200160002060006101000a81548160ff0219169083600381111561153357611532611b33565b5b021790555060006007600083815260200190815260200160002081905550336002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550803373ffffffffffffffffffffffffffffffffffffffff167fe03d61f742c11525b3c0d7993f45fbf687ef314840bc5afa547d6d74f40cabb660405160405180910390a380915050919050565b6002600381111561160457611603611b33565b5b6006600084815260200190815260200160002060009054906101000a900460ff16600381111561163757611636611b33565b5b14611677576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161166e90612608565b60405180910390fd5b60036006600084815260200190815260200160002060006101000a81548160ff021916908360038111156116ae576116ad611b33565b5b0217905550600060076000848152602001908152602001600020549050600060076000858152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f1935050505015801561172a573d6000803e3d6000fd5b5060096000848152602001908152602001600020600061174a91906117b7565b828273ffffffffffffffffffffffffffffffffffffffff167f86c3a6c2352953d57d108043736969ee0d4faa042ee18d6251fd5b580ed0cdbe60405160405180910390a3505050565b6001816000016000828254019250508190555050565b600081600001549050919050565b50805460008255906000526020600020908101906117d591906117d8565b50565b5b808211156117f15760008160009055506001016117d9565b5090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b61181c81611809565b811461182757600080fd5b50565b60008135905061183981611813565b92915050565b600060208284031215611855576118546117ff565b5b60006118638482850161182a565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006118c382611898565b9050919050565b6118d3816118b8565b82525050565b60006118e583836118ca565b60208301905092915050565b6000602082019050919050565b60006119098261186c565b6119138185611877565b935061191e83611888565b8060005b8381101561194f57815161193688826118d9565b9750611941836118f1565b925050600181019050611922565b5085935050505092915050565b6000602082019050818103600083015261197681846118fe565b905092915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6119cc82611983565b810181811067ffffffffffffffff821117156119eb576119ea611994565b5b80604052505050565b60006119fe6117f5565b9050611a0a82826119c3565b919050565b600067ffffffffffffffff821115611a2a57611a29611994565b5b602082029050602081019050919050565b600080fd5b6000611a53611a4e84611a0f565b6119f4565b90508083825260208201905060208402830185811115611a7657611a75611a3b565b5b835b81811015611a9f5780611a8b888261182a565b845260208401935050602081019050611a78565b5050509392505050565b600082601f830112611abe57611abd61197e565b5b8135611ace848260208601611a40565b91505092915050565b60008060408385031215611aee57611aed6117ff565b5b6000611afc8582860161182a565b925050602083013567ffffffffffffffff811115611b1d57611b1c611804565b5b611b2985828601611aa9565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60048110611b7357611b72611b33565b5b50565b6000819050611b8482611b62565b919050565b6000611b9482611b76565b9050919050565b611ba481611b89565b82525050565b6000602082019050611bbf6000830184611b9b565b92915050565b611bce81611809565b82525050565b6000602082019050611be96000830184611bc5565b92915050565b600080fd5b60008083601f840112611c0a57611c0961197e565b5b8235905067ffffffffffffffff811115611c2757611c26611bef565b5b602083019150836001820283011115611c4357611c42611a3b565b5b9250929050565b60008060208385031215611c6157611c606117ff565b5b600083013567ffffffffffffffff811115611c7f57611c7e611804565b5b611c8b85828601611bf4565b92509250509250929050565b6000611ca282611898565b9050919050565b611cb281611c97565b82525050565b6000602082019050611ccd6000830184611ca9565b92915050565b60008115159050919050565b611ce881611cd3565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611d28578082015181840152602081019050611d0d565b83811115611d37576000848401525b50505050565b6000611d4882611cee565b611d528185611cf9565b9350611d62818560208601611d0a565b611d6b81611983565b840191505092915050565b6000604082019050611d8b6000830185611cdf565b8181036020830152611d9d8184611d3d565b90509392505050565b60008060408385031215611dbd57611dbc6117ff565b5b6000611dcb8582860161182a565b9250506020611ddc8582860161182a565b9150509250929050565b611def816118b8565b82525050565b6000602082019050611e0a6000830184611de6565b92915050565b611e1981611c97565b8114611e2457600080fd5b50565b600081359050611e3681611e10565b92915050565b600060208284031215611e5257611e516117ff565b5b6000611e6084828501611e27565b91505092915050565b6000604082019050611e7e6000830185611ca9565b611e8b6020830184611ca9565b9392505050565b600082825260208201905092915050565b7f536f7272792c206c6f7474657279206973206e6f74206f70656e000000000000600082015250565b6000611ed9601a83611e92565b9150611ee482611ea3565b602082019050919050565b60006020820190508181036000830152611f0881611ecc565b9050919050565b7f4e6f7420656e6f7567682045544820746f20656e74657220746865206c6f747460008201527f6572790000000000000000000000000000000000000000000000000000000000602082015250565b6000611f6b602383611e92565b9150611f7682611f0f565b604082019050919050565b60006020820190508181036000830152611f9a81611f5e565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611fdb82611809565b9150611fe683611809565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561201b5761201a611fa1565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600061206082611809565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361209257612091611fa1565b5b600182019050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006120d3602083611e92565b91506120de8261209d565b602082019050919050565b60006020820190508181036000830152612102816120c6565b9050919050565b7f4e6f7420656e6f7567682045544820746f206372656174652061206c6f74746560008201527f7279000000000000000000000000000000000000000000000000000000000000602082015250565b6000612165602283611e92565b915061217082612109565b604082019050919050565b6000602082019050818103600083015261219481612158565b9050919050565b7f4f6e6c792063726561746f72206f6620746865206c6f74746572792063616e2060008201527f73746f702074686520656e7472616e6365730000000000000000000000000000602082015250565b60006121f7603283611e92565b91506122028261219b565b604082019050919050565b60006020820190508181036000830152612226816121ea565b9050919050565b7f4f6e6c792063726561746f72206f6620746865204c6f74746572792063616e2060008201527f63616c63756c6174652077696e6e657273000000000000000000000000000000602082015250565b6000612289603183611e92565b91506122948261222d565b604082019050919050565b600060208201905081810360008301526122b88161227c565b9050919050565b7f536f7272792c206c6f7474657279206973206e6f742073746f70706564000000600082015250565b60006122f5601d83611e92565b9150612300826122bf565b602082019050919050565b60006020820190508181036000830152612324816122e8565b9050919050565b7f4e6f20656e7472616e6365730000000000000000000000000000000000000000600082015250565b6000612361600c83611e92565b915061236c8261232b565b602082019050919050565b6000602082019050818103600083015261239081612354565b9050919050565b6000819050919050565b6123aa81612397565b82525050565b600067ffffffffffffffff82169050919050565b6123cd816123b0565b82525050565b600061ffff82169050919050565b6123ea816123d3565b82525050565b600063ffffffff82169050919050565b612409816123f0565b82525050565b600060a08201905061242460008301886123a1565b61243160208301876123c4565b61243e60408301866123e1565b61244b6060830185612400565b6124586080830184612400565b9695505050505050565b60008151905061247181611813565b92915050565b60006020828403121561248d5761248c6117ff565b5b600061249b84828501612462565b91505092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000612500602683611e92565b915061250b826124a4565b604082019050919050565b6000602082019050818103600083015261252f816124f3565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061257082611809565b915061257b83611809565b92508261258b5761258a612536565b5b828206905092915050565b7f536f7272792c206c6f7474657279206973206e6f7420696e2043616c63756c6160008201527f74696e6720737461746500000000000000000000000000000000000000000000602082015250565b60006125f2602a83611e92565b91506125fd82612596565b604082019050919050565b60006020820190508181036000830152612621816125e5565b905091905056fea26469706673582212208ed46cb09be27763750cb4f534e37f90bb3c177228e18fa66855c28989a5120864736f6c634300080d0033",
  "deployedBytecode": "0x6080604052600436106101355760003560e01c80638e4acab5116100ab578063da1086a01161006f578063da1086a014610455578063e1d1033d1461047e578063e3c55e401461049a578063e88958dc146104c3578063e8b161ad146104ee578063f2fde38b1461052b57610135565b80638e4acab5146103385780639ad2acf5146103755780639bb1e5b61461039e578063c1549629146103db578063cbc388671461041857610135565b80634585e33b116100fd5780634585e33b1461023657806361dad1211461025f5780636e04ff0d1461029c578063715018a6146102da5780638da5cb5b146102f15780638dd8c56d1461031c57610135565b80631ecbcbf51461013a5780631fe543e3146101775780631fec3938146101a05780632bc5f392146101dd5780633fd430981461021a575b600080fd5b34801561014657600080fd5b50610161600480360381019061015c919061183f565b610554565b60405161016e919061195c565b60405180910390f35b34801561018357600080fd5b5061019e60048036038101906101999190611ad7565b6105f5565b005b3480156101ac57600080fd5b506101c760048036038101906101c2919061183f565b6106b5565b6040516101d49190611baa565b60405180910390f35b3480156101e957600080fd5b5061020460048036038101906101ff919061183f565b6106d5565b6040516102119190611bd4565b60405180910390f35b610234600480360381019061022f919061183f565b6106f9565b005b34801561024257600080fd5b5061025d60048036038101906102589190611c4a565b610883565b005b34801561026b57600080fd5b506102866004803603810190610281919061183f565b61099f565b6040516102939190611cb8565b60405180910390f35b3480156102a857600080fd5b506102c360048036038101906102be9190611c4a565b6109d2565b6040516102d1929190611d76565b60405180910390f35b3480156102e657600080fd5b506102ef610ae6565b005b3480156102fd57600080fd5b50610306610b6e565b6040516103139190611cb8565b60405180910390f35b6103366004803603810190610331919061183f565b610b97565b005b34801561034457600080fd5b5061035f600480360381019061035a919061183f565b610be9565b60405161036c9190611bd4565b60405180910390f35b34801561038157600080fd5b5061039c6004803603810190610397919061183f565b610c01565b005b3480156103aa57600080fd5b506103c560048036038101906103c0919061183f565b610d68565b6040516103d29190611bd4565b60405180910390f35b3480156103e757600080fd5b5061040260048036038101906103fd919061183f565b610d80565b60405161040f9190611bd4565b60405180910390f35b34801561042457600080fd5b5061043f600480360381019061043a9190611da6565b610d98565b60405161044c9190611df5565b60405180910390f35b34801561046157600080fd5b5061047c6004803603810190610477919061183f565b610de6565b005b61049860048036038101906104939190611da6565b6110b5565b005b3480156104a657600080fd5b506104c160048036038101906104bc919061183f565b611158565b005b3480156104cf57600080fd5b506104d86111de565b6040516104e59190611bd4565b60405180910390f35b3480156104fa57600080fd5b506105156004803603810190610510919061183f565b6111e4565b6040516105229190611bd4565b60405180910390f35b34801561053757600080fd5b50610552600480360381019061054d9190611e3c565b6111fc565b005b6060600960008381526020019081526020016000208054806020026020016040519081016040528092919081815260200182805480156105e957602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161059f575b50505050509050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106a757337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f400000000000000000000000000000000000000000000000000000000815260040161069e929190611e69565b60405180910390fd5b6106b182826112f3565b5050565b60066020528060005260406000206000915054906101000a900460ff1681565b600581815481106106e557600080fd5b906000526020600020016000915090505481565b6000600381111561070d5761070c611b33565b5b6006600083815260200190815260200160002060009054906101000a900460ff1660038111156107405761073f611b33565b5b14610780576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161077790611eef565b60405180910390fd5b60036000828152602001908152602001600020543410156107d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107cd90611f81565b60405180910390fd5b3460076000838152602001908152602001600020546107f59190611fd0565b600760008381526020019081526020016000208190555060096000828152602001908152602001600020339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600580549050905060005b81811015610999576000600582815481106108ae576108ad612026565b5b90600052602060002001549050600060096000838152602001908152602001600020805490501180156108f35750426004600083815260200190815260200160002054105b801561094357506000600381111561090e5761090d611b33565b5b6006600083815260200190815260200160002060009054906101000a900460ff16600381111561094157610940611b33565b5b145b156109855760016006600083815260200190815260200160002060006101000a81548160ff0219169083600381111561097f5761097e611b33565b5b02179055505b50808061099190612055565b915050610890565b50505050565b60026020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006060600091506000600580549050905060005b81811015610adc57600060058281548110610a0557610a04612026565b5b906000526020600020015490508480610aa2575060006009600083815260200190815260200160002080549050118015610a515750426004600083815260200190815260200160002054105b8015610aa1575060006003811115610a6c57610a6b611b33565b5b6006600083815260200190815260200160002060009054906101000a900460ff166003811115610a9f57610a9e611b33565b5b145b5b94508415610ac85760016040518060200160405280600081525094509450505050610adf565b508080610ad490612055565b9150506109e7565b50505b9250929050565b610aee6113fe565b73ffffffffffffffffffffffffffffffffffffffff16610b0c610b6e565b73ffffffffffffffffffffffffffffffffffffffff1614610b62576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b59906120e9565b60405180910390fd5b610b6c6000611406565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600154341015610bdc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bd39061217b565b60405180910390fd5b610be5816114ca565b5050565b60076020528060005260406000206000915090505481565b6002600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610ca2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c999061220d565b60405180910390fd5b60006003811115610cb657610cb5611b33565b5b6006600083815260200190815260200160002060009054906101000a900460ff166003811115610ce957610ce8611b33565b5b14610d29576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d2090611eef565b60405180910390fd5b60016006600083815260200190815260200160002060006101000a81548160ff02191690836003811115610d6057610d5f611b33565b5b021790555050565b60046020528060005260406000206000915090505481565b60086020528060005260406000206000915090505481565b60096020528160005260406000208181548110610db457600080fd5b906000526020600020016000915091509054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6002600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610e87576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e7e9061229f565b60405180910390fd5b60016003811115610e9b57610e9a611b33565b5b6006600083815260200190815260200160002060009054906101000a900460ff166003811115610ece57610ecd611b33565b5b14610f0e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f059061230b565b60405180910390fd5b6000600960008381526020019081526020016000208054905011610f67576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f5e90612377565b60405180910390fd5b60026006600083815260200190815260200160002060006101000a81548160ff02191690836003811115610f9e57610f9d611b33565b5b02179055506000600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635d3b1d30600c54600b60149054906101000a900467ffffffffffffffff16600d60049054906101000a900461ffff16600d60009054906101000a900463ffffffff16600d60069054906101000a900463ffffffff166040518663ffffffff1660e01b815260040161105495949392919061240f565b6020604051808303816000875af1158015611073573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110979190612477565b90508160086000838152602001908152602001600020819055505050565b6001543410156110fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110f19061217b565b60405180910390fd5b6000611105836114ca565b905081426111139190611fd0565b60046000838152602001908152602001600020819055506005819080600181540180825580915050600190039060005260206000200160009091909190915055505050565b6111606113fe565b73ffffffffffffffffffffffffffffffffffffffff1661117e610b6e565b73ffffffffffffffffffffffffffffffffffffffff16146111d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111cb906120e9565b60405180910390fd5b8060018190555050565b60015481565b60036020528060005260406000206000915090505481565b6112046113fe565b73ffffffffffffffffffffffffffffffffffffffff16611222610b6e565b73ffffffffffffffffffffffffffffffffffffffff1614611278576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161126f906120e9565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036112e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112de90612516565b60405180910390fd5b6112f081611406565b50565b6000600860008481526020019081526020016000205490506000600960008381526020019081526020016000208054806020026020016040519081016040528092919081815260200182805480156113a057602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611356575b5050505050905060008151846000815181106113bf576113be612026565b5b60200260200101516113d19190612565565b90506113f7838383815181106113ea576113e9612026565b5b60200260200101516115f0565b5050505050565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60006114d6600a611793565b60006114e2600a6117a9565b905082600360008381526020019081526020016000208190555060006006600083815260200190815260200160002060006101000a81548160ff0219169083600381111561153357611532611b33565b5b021790555060006007600083815260200190815260200160002081905550336002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550803373ffffffffffffffffffffffffffffffffffffffff167fe03d61f742c11525b3c0d7993f45fbf687ef314840bc5afa547d6d74f40cabb660405160405180910390a380915050919050565b6002600381111561160457611603611b33565b5b6006600084815260200190815260200160002060009054906101000a900460ff16600381111561163757611636611b33565b5b14611677576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161166e90612608565b60405180910390fd5b60036006600084815260200190815260200160002060006101000a81548160ff021916908360038111156116ae576116ad611b33565b5b0217905550600060076000848152602001908152602001600020549050600060076000858152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f1935050505015801561172a573d6000803e3d6000fd5b5060096000848152602001908152602001600020600061174a91906117b7565b828273ffffffffffffffffffffffffffffffffffffffff167f86c3a6c2352953d57d108043736969ee0d4faa042ee18d6251fd5b580ed0cdbe60405160405180910390a3505050565b6001816000016000828254019250508190555050565b600081600001549050919050565b50805460008255906000526020600020908101906117d591906117d8565b50565b5b808211156117f15760008160009055506001016117d9565b5090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b61181c81611809565b811461182757600080fd5b50565b60008135905061183981611813565b92915050565b600060208284031215611855576118546117ff565b5b60006118638482850161182a565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006118c382611898565b9050919050565b6118d3816118b8565b82525050565b60006118e583836118ca565b60208301905092915050565b6000602082019050919050565b60006119098261186c565b6119138185611877565b935061191e83611888565b8060005b8381101561194f57815161193688826118d9565b9750611941836118f1565b925050600181019050611922565b5085935050505092915050565b6000602082019050818103600083015261197681846118fe565b905092915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6119cc82611983565b810181811067ffffffffffffffff821117156119eb576119ea611994565b5b80604052505050565b60006119fe6117f5565b9050611a0a82826119c3565b919050565b600067ffffffffffffffff821115611a2a57611a29611994565b5b602082029050602081019050919050565b600080fd5b6000611a53611a4e84611a0f565b6119f4565b90508083825260208201905060208402830185811115611a7657611a75611a3b565b5b835b81811015611a9f5780611a8b888261182a565b845260208401935050602081019050611a78565b5050509392505050565b600082601f830112611abe57611abd61197e565b5b8135611ace848260208601611a40565b91505092915050565b60008060408385031215611aee57611aed6117ff565b5b6000611afc8582860161182a565b925050602083013567ffffffffffffffff811115611b1d57611b1c611804565b5b611b2985828601611aa9565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60048110611b7357611b72611b33565b5b50565b6000819050611b8482611b62565b919050565b6000611b9482611b76565b9050919050565b611ba481611b89565b82525050565b6000602082019050611bbf6000830184611b9b565b92915050565b611bce81611809565b82525050565b6000602082019050611be96000830184611bc5565b92915050565b600080fd5b60008083601f840112611c0a57611c0961197e565b5b8235905067ffffffffffffffff811115611c2757611c26611bef565b5b602083019150836001820283011115611c4357611c42611a3b565b5b9250929050565b60008060208385031215611c6157611c606117ff565b5b600083013567ffffffffffffffff811115611c7f57611c7e611804565b5b611c8b85828601611bf4565b92509250509250929050565b6000611ca282611898565b9050919050565b611cb281611c97565b82525050565b6000602082019050611ccd6000830184611ca9565b92915050565b60008115159050919050565b611ce881611cd3565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611d28578082015181840152602081019050611d0d565b83811115611d37576000848401525b50505050565b6000611d4882611cee565b611d528185611cf9565b9350611d62818560208601611d0a565b611d6b81611983565b840191505092915050565b6000604082019050611d8b6000830185611cdf565b8181036020830152611d9d8184611d3d565b90509392505050565b60008060408385031215611dbd57611dbc6117ff565b5b6000611dcb8582860161182a565b9250506020611ddc8582860161182a565b9150509250929050565b611def816118b8565b82525050565b6000602082019050611e0a6000830184611de6565b92915050565b611e1981611c97565b8114611e2457600080fd5b50565b600081359050611e3681611e10565b92915050565b600060208284031215611e5257611e516117ff565b5b6000611e6084828501611e27565b91505092915050565b6000604082019050611e7e6000830185611ca9565b611e8b6020830184611ca9565b9392505050565b600082825260208201905092915050565b7f536f7272792c206c6f7474657279206973206e6f74206f70656e000000000000600082015250565b6000611ed9601a83611e92565b9150611ee482611ea3565b602082019050919050565b60006020820190508181036000830152611f0881611ecc565b9050919050565b7f4e6f7420656e6f7567682045544820746f20656e74657220746865206c6f747460008201527f6572790000000000000000000000000000000000000000000000000000000000602082015250565b6000611f6b602383611e92565b9150611f7682611f0f565b604082019050919050565b60006020820190508181036000830152611f9a81611f5e565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611fdb82611809565b9150611fe683611809565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561201b5761201a611fa1565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600061206082611809565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361209257612091611fa1565b5b600182019050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006120d3602083611e92565b91506120de8261209d565b602082019050919050565b60006020820190508181036000830152612102816120c6565b9050919050565b7f4e6f7420656e6f7567682045544820746f206372656174652061206c6f74746560008201527f7279000000000000000000000000000000000000000000000000000000000000602082015250565b6000612165602283611e92565b915061217082612109565b604082019050919050565b6000602082019050818103600083015261219481612158565b9050919050565b7f4f6e6c792063726561746f72206f6620746865206c6f74746572792063616e2060008201527f73746f702074686520656e7472616e6365730000000000000000000000000000602082015250565b60006121f7603283611e92565b91506122028261219b565b604082019050919050565b60006020820190508181036000830152612226816121ea565b9050919050565b7f4f6e6c792063726561746f72206f6620746865204c6f74746572792063616e2060008201527f63616c63756c6174652077696e6e657273000000000000000000000000000000602082015250565b6000612289603183611e92565b91506122948261222d565b604082019050919050565b600060208201905081810360008301526122b88161227c565b9050919050565b7f536f7272792c206c6f7474657279206973206e6f742073746f70706564000000600082015250565b60006122f5601d83611e92565b9150612300826122bf565b602082019050919050565b60006020820190508181036000830152612324816122e8565b9050919050565b7f4e6f20656e7472616e6365730000000000000000000000000000000000000000600082015250565b6000612361600c83611e92565b915061236c8261232b565b602082019050919050565b6000602082019050818103600083015261239081612354565b9050919050565b6000819050919050565b6123aa81612397565b82525050565b600067ffffffffffffffff82169050919050565b6123cd816123b0565b82525050565b600061ffff82169050919050565b6123ea816123d3565b82525050565b600063ffffffff82169050919050565b612409816123f0565b82525050565b600060a08201905061242460008301886123a1565b61243160208301876123c4565b61243e60408301866123e1565b61244b6060830185612400565b6124586080830184612400565b9695505050505050565b60008151905061247181611813565b92915050565b60006020828403121561248d5761248c6117ff565b5b600061249b84828501612462565b91505092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000612500602683611e92565b915061250b826124a4565b604082019050919050565b6000602082019050818103600083015261252f816124f3565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061257082611809565b915061257b83611809565b92508261258b5761258a612536565b5b828206905092915050565b7f536f7272792c206c6f7474657279206973206e6f7420696e2043616c63756c6160008201527f74696e6720737461746500000000000000000000000000000000000000000000602082015250565b60006125f2602a83611e92565b91506125fd82612596565b604082019050919050565b60006020820190508181036000830152612621816125e5565b905091905056fea26469706673582212208ed46cb09be27763750cb4f534e37f90bb3c177228e18fa66855c28989a5120864736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 212,
        "contract": "contracts/LotteryMaker.sol:LotteryMaker",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 441,
        "contract": "contracts/LotteryMaker.sol:LotteryMaker",
        "label": "creatorFee",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 445,
        "contract": "contracts/LotteryMaker.sol:LotteryMaker",
        "label": "lotteryIDOwnerMapping",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 449,
        "contract": "contracts/LotteryMaker.sol:LotteryMaker",
        "label": "lotteryIDFeeMapping",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 453,
        "contract": "contracts/LotteryMaker.sol:LotteryMaker",
        "label": "lotteryIDEndtimeMapping",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 456,
        "contract": "contracts/LotteryMaker.sol:LotteryMaker",
        "label": "lotteryIDToCheckDuration",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 461,
        "contract": "contracts/LotteryMaker.sol:LotteryMaker",
        "label": "lotteryIDStateMapping",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_enum(LotteryState)427)"
      },
      {
        "astId": 465,
        "contract": "contracts/LotteryMaker.sol:LotteryMaker",
        "label": "lotteryIDBalanceMapping",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 469,
        "contract": "contracts/LotteryMaker.sol:LotteryMaker",
        "label": "requestIDLotteryIDMapping",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 474,
        "contract": "contracts/LotteryMaker.sol:LotteryMaker",
        "label": "lotteryIDEntrancesMapping",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_array(t_address_payable)dyn_storage)"
      },
      {
        "astId": 477,
        "contract": "contracts/LotteryMaker.sol:LotteryMaker",
        "label": "lotteryIDCounter",
        "offset": 0,
        "slot": "10",
        "type": "t_struct(Counter)337_storage"
      },
      {
        "astId": 480,
        "contract": "contracts/LotteryMaker.sol:LotteryMaker",
        "label": "COORDINATOR",
        "offset": 0,
        "slot": "11",
        "type": "t_contract(VRFCoordinatorV2Interface)204"
      },
      {
        "astId": 482,
        "contract": "contracts/LotteryMaker.sol:LotteryMaker",
        "label": "s_subscriptionId",
        "offset": 20,
        "slot": "11",
        "type": "t_uint64"
      },
      {
        "astId": 484,
        "contract": "contracts/LotteryMaker.sol:LotteryMaker",
        "label": "keyHash",
        "offset": 0,
        "slot": "12",
        "type": "t_bytes32"
      },
      {
        "astId": 487,
        "contract": "contracts/LotteryMaker.sol:LotteryMaker",
        "label": "callbackGasLimit",
        "offset": 0,
        "slot": "13",
        "type": "t_uint32"
      },
      {
        "astId": 490,
        "contract": "contracts/LotteryMaker.sol:LotteryMaker",
        "label": "requestConfirmations",
        "offset": 4,
        "slot": "13",
        "type": "t_uint16"
      },
      {
        "astId": 493,
        "contract": "contracts/LotteryMaker.sol:LotteryMaker",
        "label": "numWords",
        "offset": 6,
        "slot": "13",
        "type": "t_uint32"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address_payable)dyn_storage": {
        "base": "t_address_payable",
        "encoding": "dynamic_array",
        "label": "address payable[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(VRFCoordinatorV2Interface)204": {
        "encoding": "inplace",
        "label": "contract VRFCoordinatorV2Interface",
        "numberOfBytes": "20"
      },
      "t_enum(LotteryState)427": {
        "encoding": "inplace",
        "label": "enum LotteryMaker.LotteryState",
        "numberOfBytes": "1"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_array(t_address_payable)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address payable[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address_payable)dyn_storage"
      },
      "t_mapping(t_uint256,t_enum(LotteryState)427)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => enum LotteryMaker.LotteryState)",
        "numberOfBytes": "32",
        "value": "t_enum(LotteryState)427"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Counter)337_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 336,
            "contract": "contracts/LotteryMaker.sol:LotteryMaker",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}